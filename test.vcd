$date
	Thu Mar 28 12:43:57 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test $end
$var wire 1 ! fin $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$var reg 1 $ xs $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 $ xs $end
$var wire 1 ! fin $end
$var wire 1 % Wt $end
$var wire 1 & Wc $end
$var wire 1 ' Wb $end
$var wire 1 ( Wac $end
$var wire 1 ) Wa $end
$var wire 1 * S $end
$var wire 1 + Rc $end
$var wire 1 , Rb $end
$var wire 1 - Rac $end
$var wire 1 . Ra $end
$var wire 1 / R $end
$scope module UC $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 $ xs $end
$var reg 1 / R $end
$var reg 1 . Ra $end
$var reg 1 - Rac $end
$var reg 1 , Rb $end
$var reg 1 + Rc $end
$var reg 1 * S $end
$var reg 1 ) Wa $end
$var reg 1 ( Wac $end
$var reg 1 ' Wb $end
$var reg 1 & Wc $end
$var reg 1 % Wt $end
$var reg 4 0 current_state [3:0] $end
$var reg 1 ! fin $end
$var reg 4 1 next_state [3:0] $end
$upscope $end
$scope module UD $end
$var wire 1 / R $end
$var wire 1 . Ra $end
$var wire 1 - Rac $end
$var wire 1 , Rb $end
$var wire 1 + Rc $end
$var wire 1 * S $end
$var wire 1 ) Wa $end
$var wire 1 ( Wac $end
$var wire 1 ' Wb $end
$var wire 1 & Wc $end
$var wire 1 % Wt $end
$var wire 8 2 bus1 [7:0] $end
$var wire 1 " clk $end
$var wire 8 3 bus3 [7:0] $end
$var wire 8 4 bus2 [7:0] $end
$scope module A $end
$var wire 1 . R $end
$var wire 1 ) W $end
$var wire 8 5 bus [7:0] $end
$var wire 1 " clk $end
$var reg 8 6 q [7:0] $end
$upscope $end
$scope module AC $end
$var wire 1 - R $end
$var wire 1 ( W $end
$var wire 8 7 busout [7:0] $end
$var wire 1 " clk $end
$var wire 8 8 busin [7:0] $end
$var reg 8 9 q [7:0] $end
$upscope $end
$scope module ALU $end
$var wire 8 : b [7:0] $end
$var wire 1 / r $end
$var wire 1 * s $end
$var wire 8 ; a [7:0] $end
$var reg 8 < out [7:0] $end
$upscope $end
$scope module B $end
$var wire 1 , R $end
$var wire 1 ' W $end
$var wire 8 = bus [7:0] $end
$var wire 1 " clk $end
$var reg 8 > q [7:0] $end
$upscope $end
$scope module C $end
$var wire 1 + R $end
$var wire 1 & W $end
$var wire 8 ? bus [7:0] $end
$var wire 1 " clk $end
$var reg 8 @ q [7:0] $end
$upscope $end
$scope module T $end
$var wire 1 % W $end
$var wire 8 A busin [7:0] $end
$var wire 8 B busout [7:0] $end
$var wire 1 " clk $end
$var reg 8 C q [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 C
b0 B
bz A
b0 @
bz ?
b100 >
bz =
b0 <
b0 ;
bz :
b0 9
b0 8
bz 7
b10 6
bz 5
b0 4
b0 3
bz 2
bx 1
bx 0
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
$end
#5000
b0 1
b0 0
1#
1"
#10000
b1 1
1$
0#
0"
#15000
b10 2
b10 5
b10 7
b10 :
b10 =
b10 ?
b10 A
1%
1.
b1 0
b10 1
0$
1"
#20000
0"
#25000
b100 3
b100 8
b100 <
b11 1
1(
1*
0%
1.
b10 0
b10 4
b10 ;
b10 B
b10 C
1"
#30000
0"
#35000
b100 2
b100 5
b100 7
b100 :
b100 =
b100 ?
b100 A
b0 3
b0 8
b0 <
b100 1
1-
1&
0(
0.
0*
b11 0
b100 9
1"
#40000
0"
#45000
b100 2
b100 5
b100 7
b100 :
b100 =
b100 ?
b100 A
b101 1
1%
1,
0&
0-
b100 0
b100 @
1"
#50000
0"
#55000
b1000 3
b1000 8
b1000 <
b110 1
1*
1(
0%
1,
b101 0
b100 4
b100 ;
b100 B
b100 C
1"
#60000
0"
#65000
b1000 2
b1000 5
b1000 7
b1000 :
b1000 =
b1000 ?
b1000 A
b0 3
b0 8
b0 <
b111 1
1)
1-
0(
0,
0*
b110 0
b1000 9
1"
#70000
0"
#75000
b100 2
b100 5
b100 7
b100 :
b100 =
b100 ?
b100 A
b1000 1
1+
1%
0)
0-
b111 0
b1000 6
1"
#80000
0"
#85000
b1001 1
1%
1+
b1000 0
1"
#90000
0"
#95000
b1100 3
b1100 8
b1100 <
b1000 2
b1000 5
b1000 7
b1000 :
b1000 =
b1000 ?
b1000 A
b1010 1
1*
1.
1(
0%
0+
b1001 0
1"
#100000
0"
#105000
b1100 2
b1100 5
b1100 7
b1100 :
b1100 =
b1100 ?
b1100 A
b0 3
b0 8
b0 <
b1011 1
1&
1-
0(
0.
0*
b1010 0
b1100 9
1"
#110000
0"
#115000
bz 2
bz 5
bz 7
bz :
bz =
bz ?
bz A
b0 1
1!
0&
0-
b1011 0
b1100 @
1"
#120000
0"
#125000
0!
b0 0
1"
#130000
0"
#135000
1"
#140000
0"
#145000
1"
